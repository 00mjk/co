// generated from arch/*_ops.ts -- do not edit.
import { Op, OpInfo, AuxType, SymEffect } from "../ir/op"
import { UInt64 } from "../int64"
import {
  t_bool,
  t_f32,
  t_f64,
  t_i16,
  t_i32,
  t_i64,
  t_mem,
  t_nil,
  t_u16,
  t_u32,
  t_u64,
  t_u8,
  t_uintptr
} from "../types"

const u64_ffff = new UInt64(65535,0),
      u64_50000ffff = new UInt64(65535,5),
      u64_10000ffff = new UInt64(65535,1),
      u64_ffffffff = new UInt64(-1,0);

export const ops = {
  
  // generic
  Invalid: 0,
  Unknown: 1,
  Phi: 2,
  Copy: 3,
  Arg: 4,
  InitMem: 5,
  CallArg: 6,
  NilCheck: 7,
  InlMark: 8,
  Call: 9,
  TailCall: 10,
  ConstBool: 11,
  ConstI8: 12,
  ConstI16: 13,
  ConstI32: 14,
  ConstI64: 15,
  ConstF32: 16,
  ConstF64: 17,
  ConstStr: 18,
  SP: 19,
  SB: 20,
  Load: 21,
  Store: 22,
  Move: 23,
  Zero: 24,
  OffPtr: 25,
  StoreReg: 26,
  LoadReg: 27,
  AddI8: 28,
  AddI16: 29,
  AddI32: 30,
  AddI64: 31,
  AddF32: 32,
  AddF64: 33,
  SubI8: 34,
  SubI16: 35,
  SubI32: 36,
  SubI64: 37,
  SubF32: 38,
  SubF64: 39,
  MulI8: 40,
  MulI16: 41,
  MulI32: 42,
  MulI64: 43,
  MulF32: 44,
  MulF64: 45,
  DivS8: 46,
  DivU8: 47,
  DivS16: 48,
  DivU16: 49,
  DivS32: 50,
  DivU32: 51,
  DivS64: 52,
  DivU64: 53,
  DivF32: 54,
  DivF64: 55,
  RemS8: 56,
  RemU8: 57,
  RemS16: 58,
  RemU16: 59,
  RemS32: 60,
  RemU32: 61,
  RemI64: 62,
  RemU64: 63,
  AndI8: 64,
  AndI16: 65,
  AndI32: 66,
  AndI64: 67,
  OrI8: 68,
  OrI16: 69,
  OrI32: 70,
  OrI64: 71,
  XorI8: 72,
  XorI16: 73,
  XorI32: 74,
  XorI64: 75,
  ShLI8x8: 76,
  ShLI8x16: 77,
  ShLI8x32: 78,
  ShLI8x64: 79,
  ShLI16x8: 80,
  ShLI16x16: 81,
  ShLI16x32: 82,
  ShLI16x64: 83,
  ShLI32x8: 84,
  ShLI32x16: 85,
  ShLI32x32: 86,
  ShLI32x64: 87,
  ShLI64x8: 88,
  ShLI64x16: 89,
  ShLI64x32: 90,
  ShLI64x64: 91,
  ShRS8x8: 92,
  ShRS8x16: 93,
  ShRS8x32: 94,
  ShRS8x64: 95,
  ShRS16x8: 96,
  ShRS16x16: 97,
  ShRS16x32: 98,
  ShRS16x64: 99,
  ShRS32x8: 100,
  ShRS32x16: 101,
  ShRS32x32: 102,
  ShRS32x64: 103,
  ShRS64x8: 104,
  ShRS64x16: 105,
  ShRS64x32: 106,
  ShRS64x64: 107,
  ShRU8x8: 108,
  ShRU8x16: 109,
  ShRU8x32: 110,
  ShRU8x64: 111,
  ShRU16x8: 112,
  ShRU16x16: 113,
  ShRU16x32: 114,
  ShRU16x64: 115,
  ShRU32x8: 116,
  ShRU32x16: 117,
  ShRU32x32: 118,
  ShRU32x64: 119,
  ShRU64x8: 120,
  ShRU64x16: 121,
  ShRU64x32: 122,
  ShRU64x64: 123,
  EqI8: 124,
  EqI16: 125,
  EqI32: 126,
  EqI64: 127,
  EqF32: 128,
  EqF64: 129,
  NeqI8: 130,
  NeqI16: 131,
  NeqI32: 132,
  NeqI64: 133,
  NeqF32: 134,
  NeqF64: 135,
  LessS8: 136,
  LessU8: 137,
  LessS16: 138,
  LessU16: 139,
  LessS32: 140,
  LessU32: 141,
  LessS64: 142,
  LessU64: 143,
  LessF32: 144,
  LessF64: 145,
  LeqS8: 146,
  LeqU8: 147,
  LeqS16: 148,
  LeqU16: 149,
  LeqS32: 150,
  LeqU32: 151,
  LeqS64: 152,
  LeqU64: 153,
  LeqF32: 154,
  LeqF64: 155,
  GreaterS8: 156,
  GreaterU8: 157,
  GreaterS16: 158,
  GreaterU16: 159,
  GreaterS32: 160,
  GreaterU32: 161,
  GreaterS64: 162,
  GreaterU64: 163,
  GreaterF32: 164,
  GreaterF64: 165,
  GeqS8: 166,
  GeqU8: 167,
  GeqS16: 168,
  GeqU16: 169,
  GeqS32: 170,
  GeqU32: 171,
  GeqS64: 172,
  GeqU64: 173,
  GeqF32: 174,
  GeqF64: 175,
  Not: 176,
  MinF32: 177,
  MinF64: 178,
  MaxF32: 179,
  MaxF64: 180,
  NegI8: 181,
  NegI16: 182,
  NegI32: 183,
  NegI64: 184,
  NegF32: 185,
  NegF64: 186,
  CtzI8: 187,
  CtzI16: 188,
  CtzI32: 189,
  CtzI64: 190,
  CtzI8NonZero: 191,
  CtzI16NonZero: 192,
  CtzI32NonZero: 193,
  CtzI64NonZero: 194,
  BitLen8: 195,
  BitLen16: 196,
  BitLen32: 197,
  BitLen64: 198,
  PopCountI8: 199,
  PopCountI16: 200,
  PopCountI32: 201,
  PopCountI64: 202,
  SqrtF32: 203,
  SqrtF64: 204,
  FloorF32: 205,
  FloorF64: 206,
  CeilF32: 207,
  CeilF64: 208,
  TruncF32: 209,
  TruncF64: 210,
  RoundF32: 211,
  RoundF64: 212,
  RoundToEvenF32: 213,
  RoundToEvenF64: 214,
  AbsF32: 215,
  AbsF64: 216,
  CopysignF32: 217,
  CopysignF64: 218,
  SignExtI8to16: 219,
  SignExtI8to32: 220,
  SignExtI8to64: 221,
  SignExtI16to32: 222,
  SignExtI16to64: 223,
  SignExtI32to64: 224,
  ZeroExtI8to16: 225,
  ZeroExtI8to32: 226,
  ZeroExtI8to64: 227,
  ZeroExtI16to32: 228,
  ZeroExtI16to64: 229,
  ZeroExtI32to64: 230,
  TruncI8toBool: 231,
  TruncI16toBool: 232,
  TruncI32toBool: 233,
  TruncI64toBool: 234,
  TruncF32toBool: 235,
  TruncF64toBool: 236,
  TruncI16to8: 237,
  TruncI32to8: 238,
  TruncI32to16: 239,
  TruncI64to8: 240,
  TruncI64to16: 241,
  TruncI64to32: 242,
  ConvI32toF32: 243,
  ConvI32toF64: 244,
  ConvI64toF32: 245,
  ConvI64toF64: 246,
  ConvF32toI32: 247,
  ConvF32toI64: 248,
  ConvF64toI32: 249,
  ConvF64toI64: 250,
  ConvF32toF64: 251,
  ConvF64toF32: 252,
  ConvU32toF32: 253,
  ConvU32toF64: 254,
  ConvF32toU32: 255,
  ConvF64toU32: 256,
  ConvU64toF32: 257,
  ConvU64toF64: 258,
  ConvF32toU64: 259,
  ConvF64toU64: 260,
  AtomicLoad32: 261,
  AtomicLoad64: 262,
  AtomicLoadPtr: 263,
  AtomicStore32: 264,
  AtomicStore64: 265,
  AtomicStorePtrNoWB: 266,
  AtomicExchange32: 267,
  AtomicExchange64: 268,
  AtomicAdd32: 269,
  AtomicAdd64: 270,
  AtomicCompareAndSwap32: 271,
  AtomicCompareAndSwap64: 272,
  AtomicAnd8: 273,
  AtomicOr8: 274,

  // covm
  CovmMOV32const: 275,
  CovmLoad8: 276,
  CovmLoad16: 277,
  CovmLoad32: 278,
  CovmLoad64: 279,
  CovmStore8: 280,
  CovmStore16: 281,
  CovmStore32: 282,
  CovmStore64: 283,
  CovmADD32: 284,
  CovmADD32const: 285,
  CovmADD64: 286,
  CovmMUL32: 287,
  CovmCALL: 288,
  CovmLowNilCheck: 289,
  CovmZeroLarge: 290,

  // END
  OpcodeMax: undefined,
};

export const opinfo :OpInfo[] = [

  // generic
  { name: "Invalid",
    argLen: 0,
    generic: true,
  },
  { name: "Unknown",
    argLen: 0,
    generic: true,
  },
  { name: "Phi",
    argLen: -1,
    generic: true,
    zeroWidth: true,
  },
  { name: "Copy",
    argLen: 1,
    generic: true,
  },
  { name: "Arg",
    argLen: 0,
    aux: AuxType.Int32,
    generic: true,
    zeroWidth: true,
  },
  { name: "InitMem",
    argLen: 0,
    generic: true,
    type: t_mem,
    zeroWidth: true,
  },
  { name: "CallArg",
    argLen: 1,
    generic: true,
    zeroWidth: true,
  },
  { name: "NilCheck",
    argLen: 2,
    faultOnNilArg0: true,
    generic: true,
    nilCheck: true,
    type: t_nil,
  },
  { name: "InlMark",
    argLen: 1,
    aux: AuxType.Int32,
    generic: true,
    type: t_nil,
  },
  { name: "Call",
    argLen: 1,
    aux: AuxType.SymOff,
    call: true,
    generic: true,
    type: t_mem,
  },
  { name: "TailCall",
    argLen: 1,
    aux: AuxType.SymOff,
    call: true,
    generic: true,
    type: t_mem,
  },
  { name: "ConstBool",
    argLen: 0,
    aux: AuxType.Bool,
    constant: true,
    generic: true,
  },
  { name: "ConstI8",
    argLen: 0,
    aux: AuxType.Int8,
    constant: true,
    generic: true,
  },
  { name: "ConstI16",
    argLen: 0,
    aux: AuxType.Int16,
    constant: true,
    generic: true,
  },
  { name: "ConstI32",
    argLen: 0,
    aux: AuxType.Int32,
    constant: true,
    generic: true,
  },
  { name: "ConstI64",
    argLen: 0,
    aux: AuxType.Int64,
    constant: true,
    generic: true,
  },
  { name: "ConstF32",
    argLen: 0,
    aux: AuxType.Int32,
    constant: true,
    generic: true,
  },
  { name: "ConstF64",
    argLen: 0,
    aux: AuxType.Int64,
    constant: true,
    generic: true,
  },
  { name: "ConstStr",
    argLen: 0,
    aux: AuxType.String,
    generic: true,
  },
  { name: "SP",
    argLen: 0,
    generic: true,
    zeroWidth: true,
  },
  { name: "SB",
    argLen: 0,
    generic: true,
    type: t_uintptr,
    zeroWidth: true,
  },
  { name: "Load",
    argLen: 2,
    generic: true,
  },
  { name: "Store",
    argLen: 3,
    aux: AuxType.Type,
    generic: true,
    type: t_mem,
  },
  { name: "Move",
    argLen: 3,
    generic: true,
    type: t_mem,
  },
  { name: "Zero",
    argLen: 2,
    generic: true,
    type: t_mem,
  },
  { name: "OffPtr",
    argLen: 1,
    aux: AuxType.Int64,
    generic: true,
    type: t_mem,
  },
  { name: "StoreReg",
    argLen: 1,
    generic: true,
  },
  { name: "LoadReg",
    argLen: 1,
    generic: true,
  },
  { name: "AddI8",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AddI16",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AddI32",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AddI64",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AddF32",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AddF64",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "SubI8",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "SubI16",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "SubI32",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "SubI64",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "SubF32",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "SubF64",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "MulI8",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "MulI16",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "MulI32",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "MulI64",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "MulF32",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "MulF64",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivS8",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivU8",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivS16",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivU16",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivS32",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivU32",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivS64",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivU64",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivF32",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "DivF64",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemS8",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemU8",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemS16",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemU16",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemS32",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemU32",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemI64",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "RemU64",
    argLen: 2,
    generic: true,
    resultInArg0: true,
  },
  { name: "AndI8",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AndI16",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AndI32",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "AndI64",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "OrI8",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "OrI16",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "OrI32",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "OrI64",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "XorI8",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "XorI16",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "XorI32",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "XorI64",
    argLen: 2,
    commutative: true,
    generic: true,
    resultInArg0: true,
  },
  { name: "ShLI8x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI8x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI8x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI8x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI16x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI16x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI16x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI16x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI32x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI32x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI32x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI32x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI64x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI64x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI64x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShLI64x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS8x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS8x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS8x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS8x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS16x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS16x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS16x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS16x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS32x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS32x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS32x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS32x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS64x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS64x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS64x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRS64x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU8x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU8x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU8x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU8x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU16x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU16x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU16x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU16x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU32x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU32x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU32x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU32x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU64x8",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU64x16",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU64x32",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "ShRU64x64",
    argLen: 2,
    aux: AuxType.Bool,
    generic: true,
  },
  { name: "EqI8",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "EqI16",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "EqI32",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "EqI64",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "EqF32",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "EqF64",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "NeqI8",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "NeqI16",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "NeqI32",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "NeqI64",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "NeqF32",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "NeqF64",
    argLen: 2,
    commutative: true,
    generic: true,
    type: t_bool,
  },
  { name: "LessS8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessU8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessS16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessU16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessS32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessU32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessS64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessU64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessF32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LessF64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqS8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqU8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqS16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqU16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqS32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqU32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqS64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqU64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqF32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "LeqF64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterS8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterU8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterS16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterU16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterS32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterU32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterS64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterU64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterF32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GreaterF64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqS8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqU8",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqS16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqU16",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqS32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqU32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqS64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqU64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqF32",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "GeqF64",
    argLen: 2,
    generic: true,
    type: t_bool,
  },
  { name: "Not",
    argLen: 1,
    generic: true,
    type: t_bool,
  },
  { name: "MinF32",
    argLen: 2,
    generic: true,
  },
  { name: "MinF64",
    argLen: 2,
    generic: true,
  },
  { name: "MaxF32",
    argLen: 2,
    generic: true,
  },
  { name: "MaxF64",
    argLen: 2,
    generic: true,
  },
  { name: "NegI8",
    argLen: 1,
    generic: true,
  },
  { name: "NegI16",
    argLen: 1,
    generic: true,
  },
  { name: "NegI32",
    argLen: 1,
    generic: true,
  },
  { name: "NegI64",
    argLen: 1,
    generic: true,
  },
  { name: "NegF32",
    argLen: 1,
    generic: true,
  },
  { name: "NegF64",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI8",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI16",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI32",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI64",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI8NonZero",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI16NonZero",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI32NonZero",
    argLen: 1,
    generic: true,
  },
  { name: "CtzI64NonZero",
    argLen: 1,
    generic: true,
  },
  { name: "BitLen8",
    argLen: 1,
    generic: true,
  },
  { name: "BitLen16",
    argLen: 1,
    generic: true,
  },
  { name: "BitLen32",
    argLen: 1,
    generic: true,
  },
  { name: "BitLen64",
    argLen: 1,
    generic: true,
  },
  { name: "PopCountI8",
    argLen: 1,
    generic: true,
  },
  { name: "PopCountI16",
    argLen: 1,
    generic: true,
  },
  { name: "PopCountI32",
    argLen: 1,
    generic: true,
  },
  { name: "PopCountI64",
    argLen: 1,
    generic: true,
  },
  { name: "SqrtF32",
    argLen: 1,
    generic: true,
  },
  { name: "SqrtF64",
    argLen: 1,
    generic: true,
  },
  { name: "FloorF32",
    argLen: 1,
    generic: true,
  },
  { name: "FloorF64",
    argLen: 1,
    generic: true,
  },
  { name: "CeilF32",
    argLen: 1,
    generic: true,
  },
  { name: "CeilF64",
    argLen: 1,
    generic: true,
  },
  { name: "TruncF32",
    argLen: 1,
    generic: true,
  },
  { name: "TruncF64",
    argLen: 1,
    generic: true,
  },
  { name: "RoundF32",
    argLen: 1,
    generic: true,
  },
  { name: "RoundF64",
    argLen: 1,
    generic: true,
  },
  { name: "RoundToEvenF32",
    argLen: 1,
    generic: true,
  },
  { name: "RoundToEvenF64",
    argLen: 1,
    generic: true,
  },
  { name: "AbsF32",
    argLen: 1,
    generic: true,
  },
  { name: "AbsF64",
    argLen: 1,
    generic: true,
  },
  { name: "CopysignF32",
    argLen: 2,
    generic: true,
  },
  { name: "CopysignF64",
    argLen: 2,
    generic: true,
  },
  { name: "SignExtI8to16",
    argLen: 1,
    generic: true,
    type: t_i16,
  },
  { name: "SignExtI8to32",
    argLen: 1,
    generic: true,
    type: t_i32,
  },
  { name: "SignExtI8to64",
    argLen: 1,
    generic: true,
    type: t_i64,
  },
  { name: "SignExtI16to32",
    argLen: 1,
    generic: true,
    type: t_i32,
  },
  { name: "SignExtI16to64",
    argLen: 1,
    generic: true,
    type: t_i64,
  },
  { name: "SignExtI32to64",
    argLen: 1,
    generic: true,
    type: t_i64,
  },
  { name: "ZeroExtI8to16",
    argLen: 1,
    generic: true,
    type: t_u16,
  },
  { name: "ZeroExtI8to32",
    argLen: 1,
    generic: true,
    type: t_u32,
  },
  { name: "ZeroExtI8to64",
    argLen: 1,
    generic: true,
    type: t_u64,
  },
  { name: "ZeroExtI16to32",
    argLen: 1,
    generic: true,
    type: t_u32,
  },
  { name: "ZeroExtI16to64",
    argLen: 1,
    generic: true,
    type: t_u64,
  },
  { name: "ZeroExtI32to64",
    argLen: 1,
    generic: true,
    type: t_u64,
  },
  { name: "TruncI8toBool",
    argLen: 1,
    generic: true,
    type: t_bool,
  },
  { name: "TruncI16toBool",
    argLen: 1,
    generic: true,
    type: t_bool,
  },
  { name: "TruncI32toBool",
    argLen: 1,
    generic: true,
    type: t_bool,
  },
  { name: "TruncI64toBool",
    argLen: 1,
    generic: true,
    type: t_bool,
  },
  { name: "TruncF32toBool",
    argLen: 1,
    generic: true,
    type: t_bool,
  },
  { name: "TruncF64toBool",
    argLen: 1,
    generic: true,
    type: t_bool,
  },
  { name: "TruncI16to8",
    argLen: 1,
    generic: true,
  },
  { name: "TruncI32to8",
    argLen: 1,
    generic: true,
  },
  { name: "TruncI32to16",
    argLen: 1,
    generic: true,
  },
  { name: "TruncI64to8",
    argLen: 1,
    generic: true,
  },
  { name: "TruncI64to16",
    argLen: 1,
    generic: true,
  },
  { name: "TruncI64to32",
    argLen: 1,
    generic: true,
  },
  { name: "ConvI32toF32",
    argLen: 1,
    generic: true,
    type: t_f32,
  },
  { name: "ConvI32toF64",
    argLen: 1,
    generic: true,
    type: t_f64,
  },
  { name: "ConvI64toF32",
    argLen: 1,
    generic: true,
    type: t_f32,
  },
  { name: "ConvI64toF64",
    argLen: 1,
    generic: true,
    type: t_f64,
  },
  { name: "ConvF32toI32",
    argLen: 1,
    generic: true,
    type: t_i32,
  },
  { name: "ConvF32toI64",
    argLen: 1,
    generic: true,
    type: t_i64,
  },
  { name: "ConvF64toI32",
    argLen: 1,
    generic: true,
    type: t_i32,
  },
  { name: "ConvF64toI64",
    argLen: 1,
    generic: true,
    type: t_i64,
  },
  { name: "ConvF32toF64",
    argLen: 1,
    generic: true,
    type: t_f64,
  },
  { name: "ConvF64toF32",
    argLen: 1,
    generic: true,
    type: t_f32,
  },
  { name: "ConvU32toF32",
    argLen: 1,
    generic: true,
    type: t_f32,
  },
  { name: "ConvU32toF64",
    argLen: 1,
    generic: true,
    type: t_f64,
  },
  { name: "ConvF32toU32",
    argLen: 1,
    generic: true,
    type: t_u32,
  },
  { name: "ConvF64toU32",
    argLen: 1,
    generic: true,
    type: t_u32,
  },
  { name: "ConvU64toF32",
    argLen: 1,
    generic: true,
    type: t_f32,
  },
  { name: "ConvU64toF64",
    argLen: 1,
    generic: true,
    type: t_f64,
  },
  { name: "ConvF32toU64",
    argLen: 1,
    generic: true,
    type: t_u64,
  },
  { name: "ConvF64toU64",
    argLen: 1,
    generic: true,
    type: t_u64,
  },
  { name: "AtomicLoad32",
    argLen: 2,
    generic: true,
  },
  { name: "AtomicLoad64",
    argLen: 2,
    generic: true,
  },
  { name: "AtomicLoadPtr",
    argLen: 2,
    generic: true,
  },
  { name: "AtomicStore32",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicStore64",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicStorePtrNoWB",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
    type: t_uintptr,
  },
  { name: "AtomicExchange32",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicExchange64",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicAdd32",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicAdd64",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicCompareAndSwap32",
    argLen: 4,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicCompareAndSwap64",
    argLen: 4,
    generic: true,
    hasSideEffects: true,
  },
  { name: "AtomicAnd8",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
    type: t_uintptr,
  },
  { name: "AtomicOr8",
    argLen: 3,
    generic: true,
    hasSideEffects: true,
    type: t_uintptr,
  },

  // covm
  { name: "MOV32const",
    argLen: 0,
    aux: AuxType.Int32,
    reg: {
      inputs: [],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    rematerializeable: true,
    type: t_u32,
  },
  { name: "Load8",
    argLen: 2,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    symEffect: 1,
    type: t_u8,
  },
  { name: "Load16",
    argLen: 2,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    symEffect: 1,
    type: t_u16,
  },
  { name: "Load32",
    argLen: 2,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    symEffect: 1,
    type: t_u32,
  },
  { name: "Load64",
    argLen: 2,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    symEffect: 1,
    type: t_u64,
  },
  { name: "Store8",
    argLen: 3,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/},
        {idx:1,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [],
      clobbers: UInt64.ZERO
    },
    symEffect: 2,
    type: t_uintptr,
  },
  { name: "Store16",
    argLen: 3,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/},
        {idx:1,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [],
      clobbers: UInt64.ZERO
    },
    symEffect: 2,
    type: t_uintptr,
  },
  { name: "Store32",
    argLen: 3,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/},
        {idx:1,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [],
      clobbers: UInt64.ZERO
    },
    symEffect: 2,
    type: t_uintptr,
  },
  { name: "Store64",
    argLen: 3,
    aux: AuxType.SymOff,
    faultOnNilArg0: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_50000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 }*/},
        {idx:1,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [],
      clobbers: UInt64.ZERO
    },
    symEffect: 2,
    type: t_uintptr,
  },
  { name: "ADD32",
    argLen: 2,
    commutative: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/},
        {idx:1,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    type: t_u32,
  },
  { name: "ADD32const",
    argLen: 1,
    aux: AuxType.Int32,
    commutative: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    type: t_u32,
  },
  { name: "ADD64",
    argLen: 2,
    commutative: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/},
        {idx:1,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    type: t_u64,
  },
  { name: "MUL32",
    argLen: 2,
    commutative: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/},
        {idx:1,regs:u64_10000ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 }*/}
      ],
      outputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      clobbers: UInt64.ZERO
    },
    type: t_u32,
  },
  { name: "CALL",
    argLen: 1,
    aux: AuxType.SymOff,
    call: true,
    clobberFlags: true,
    reg: {
      inputs: [],
      outputs: [],
      clobbers: u64_ffffffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 }*/
    },
  },
  { name: "LowNilCheck",
    argLen: 2,
    faultOnNilArg0: true,
    nilCheck: true,
    reg: {
      inputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      outputs: [],
      clobbers: UInt64.ZERO
    },
    type: t_nil,
  },
  { name: "ZeroLarge",
    argLen: 2,
    aux: AuxType.Int64,
    reg: {
      inputs: [
        {idx:0,regs:u64_ffff /*RegSet { r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 }*/}
      ],
      outputs: [],
      clobbers: UInt64.ZERO
    },
  },
]; // ops



// fmtop returns a printable representation of an operator
//
export function fmtop(op :Op) :string {
  let info = opinfo[op]
  assert(info, `unknown op #${op}`)
  return info.name
}
