_ i64 = 9223372036854775807     // u64   -> i64  (I64_MAX)
_ i64 = -9223372036854775808.0  // float -> i64  (I64_MIN)
_ i64 = 123                     // u32   -> i64
_ i64 = +123                    // i32   -> i64
_ i64 = -123                    // i32   -> i64
_ i64 = '\U00010299'            // char  -> i64

// // cast to u64
// _ u64 = +9223372036854775807 // i64   -> u64  (I64_MAX)
// _ u64 = 9223372036854.0      // float -> u64
// _ u64 = +123                 // i32   -> u64
// _ u64 = 123                  // u32   -> u64
// _ u64 = '\U00010299'         // char  -> u64

// // cast to i32
// _ i32 = 2147483647    // u32   -> i32  (I32_MAX)
// _ i32 = -2147483648   // i32   -> i32  (I32_MIN)
// _ i32 = +123          // i32   -> i32
// _ i32 = -123          // i32   -> i32
// _ i32 = 123           // i32   -> i32
// _ i32 = 123.0         // float -> i32
// _ i32 = '\U00010299'  // char  -> i32

// // cast to u32
// _ u32 = +2147483647   // s32   -> u32  (I32_MAX)
// _ u32 = +123          // i32   -> u32
// _ u32 = 123           // i32   -> u32
// _ u32 = 123.0         // float -> u32
// _ u32 = '\U00010299'  // char  -> u32

// // cast to i16
// _ i16 = 32767    // u32   -> i16  (I16_MAX)
// _ i16 = -32768   // i32   -> i16  (I16_MIN)
// _ i16 = +123     // i32   -> i16
// _ i16 = -123     // i32   -> i16
// _ i16 = 30000.0  // float -> i16
// _ i16 = '\u221A' // char  -> i16

// // cast to u16
// _ u16 = 65535    // u32   -> u16  (U16_MAX)
// _ u16 = +123     // i32   -> u16
// _ u16 = 123      // i32   -> u16
// _ u16 = 50000.0  // float -> u16
// _ u16 = '\u221A' // char  -> u16

// // cast to i8
// _ i8 = 127    // u32   -> i8  (I8_MAX)
// _ i8 = -128   // i32   -> i8  (I8_MIN)
// _ i8 = +123   // i32   -> i8
// _ i8 = -123   // i32   -> i8
// _ i8 = 123.0  // float -> i8
// _ i8 = 'a'    // char  -> i8

// // cast to u8
// _ u8 = 255    // u32   -> u8  (U8_MAX)
// _ u8 = +123   // i32   -> u8
// _ u8 = 123    // i32   -> u8
// _ u8 = 200.0  // float -> u8
// _ u8 = '\xff' // char  -> u8

// // cast to f64
// _ f64 = 9223372036854775807  // u64   -> f64  (I64_MAX)
// _ f64 = -9223372036854775808 // i64   -> f64  (I64_MIN)
// _ f64 = +123                 // i32   -> f64
// _ f64 = -123                 // i32   -> f64
// _ f64 = 0                    // u32   -> f64
// _ f64 = '\U00010299'         // char  -> f64

// // cast to f32
// _ f32 = 9223372036854775807  // u64   -> f32  (I64_MAX)
// _ f32 = -9223372036854775808 // i64   -> f32  (I64_MIN)
// _ f32 = 922337203.6854775807 // f64   -> f32  not an error
// _ f32 = +123                 // i32   -> f32
// _ f32 = -123                 // i32   -> f32
// _ f32 = 0                    // u32   -> f32
// _ f32 = '\U00010299'         // char  -> f32

// // cast to int (note: assumes int is >= 32 bit large)
// _ int = 2147483647    // u32 -> int  (I32_MAX)
// _ int = -2147483648   // i32 -> int  (I32_MIN)
// _ int = +123          // i32 -> int
// _ int = -123          // i32 -> int
// _ int = 123           // i32 -> int
// _ int = '\U00010299'  // char  -> int

// // cast to uint (note: assumes uint is >= 32 bit large)
// _ uint = +2147483647   // s32 -> uint  (I32_MAX)
// _ uint = +123          // i32 -> uint
// _ uint = 123           // i32 -> uint
// _ uint = '\U00010299'  // char  -> uint


#end lisp // expected
(
  (VarDecl (type i64) (values (IntLit 9223372036854775807  i64)))
  (VarDecl (type i64) (values (IntLit -9223372036854775808 i64))) ; f64 -> i64
  (VarDecl (type i64) (values (IntLit 123                  i64))) ; 123
  (VarDecl (type i64) (values (IntLit 123                  i64))) ; +123
  (VarDecl (type i64) (values (IntLit -123                 i64)))
  (VarDecl (type i64) (values (IntLit 66201                i64))) ; rune -> i64
)
