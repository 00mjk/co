// import "foo"

// simple, empty functions
fun empty0
fun empty1()
fun empty2(
  // no implicit semicolons inserted here
)
fun empty3() {}

// parameters
fun fp2(int, int) int // types only
fun fp1(a, b, c int) int // shorthand type
fun fp3(a, b, c int) int { 0 } // with body
fun fp4(a, b int, d, e f32) int { 0 } // shorthand types
// fun fp5(a int, int)int //error: mixed named and unnamed function parameters
// fun fp6(pkg.T int) {} // error: illegal parameter name

// trailing commas in params
// fun fp7(,) // error: unexpected ,, expecting name or type
// fun fp9(;) // error: unexpected ;, expecting name or type
fun fp10(int,)
fun fp11(a, b int,)

// rest
fun rest1(a ...int) {}
fun rest2(a, b ...int) {} // == (a int, b ...int)
// fun rest3(a ...int, b ...int) {} // error: can only use ... with final param
// fun rest4(a ...) {} // error: unexpected ), expecting type after ...

// result
fun fr0() int {}
fun fr1() (int) {}
fun fr2() (int,) {}
fun fr3() () {}
fun fr4() (i32, i64) {}
// fun fr5() (a t0) {} // error: unexpected name, expecting comma, or )

// single-expression body
fun fx0(a int) int -> 4
fun fx1(a int) -> (4, 4)
fun fx2() -> 4
fun fx3 -> 4
// fun fx4(b) int -> ; // error: missing function body
// fun fx5(b) -> ; // error: missing function body
// fun fx6 -> ; // error: missing function body

// used as an expression
fe0 = fun foo0(int) { 4 }
fe1 = fun foo1(int) -> 4
fe2 = fun (int) { 4 } // name is optional when used as an expression
fe3 = fun (int) -> 4
fe4 = fun -> 4
// fe5 = fun (d) int // error: missing function body
