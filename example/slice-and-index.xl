// import "foo"  // TMP hack to stop bind

// fun fields(a A) {
//   // named selectors
//   a.x
//   a.x.y
//   a.f().x

//   // numeric selectors
//   a.1
//   // a.1.2 // error: unexpected float, expecting name or integer after "."
//   (a.1).2
//   a[1].2
// }

// fun e1 {
//   // non-constant index operand
//   xs = (1, 2.3, true, "3")
//   a = 0
//   b = a      // increments a.nread
//   a = a * 1  // increments a.nwrite
//   y = xs[a]
// }


fun tuple1 {
  xs = (1, 2.3, true, "3")  // type: (i32, f64, bool, str<1>)

  // constant-expression field access (all these accesses field 1 <f64>)
  _ = xs[1]
  _ = xs[+1]
  a = -1 ; _ = xs[-a]
  b = -2 ; _ = xs[^b]
  c u32 = 0xfffffffe ; _ = xs[^c]
  d u64 = 0xfffffffffffffffe ; _ = xs[^d]
  e i64 = -2 ; _ = xs[^e]
  f i64 = 3 ; _ = xs[f + b]
  g = 3 ; _ = xs[g + b]
  _ = xs[g >> 1]
  h1 = 1 ; h2 = h1 + 1 ; h3 = h2 - 1 ; h4 = h3 ; _ = xs[h4]

  // literal field access
  _ = xs.0  // int
  _ = xs.1  // f64
  _ = xs.2  // bool
  _ = xs.3  // str<1>
  // // _ = xs.4 // error: out-of-bounds tuple index 4 on type (int, ...)

  // slicing tuples
  _ = xs[1:3]  // (f64, bool)
  _ = xs[1:]   // (f64, bool, str<1>)
  _ = xs[:3]   // (i32, f64, bool)
  _ = xs[:]    // (i32, f64, bool, str<1>)
  // _ = xs[1:2]  // invalid single-element slice of type ...
  // _ = xs[2:2] // invalid empty slice: 2 == 2
  // _ = xs[2:1] // error: invalid slice index: 2 > 1
  // _ = xs[4:] // invalid for tuples; would yield empty tuple

  // error: non-constant tuple index
  // k = 0
  // if k == 0 { k = k + 1 }  // makes k variable
  // e0 = xs[k] // error: non-constant tuple index
}

fun late1 {
  // late resolution
  xs2 = (1, late-str)  // resolved to (int, str<5>) in post-resolve
  v = xs2.1  // resolved to str<5> in post-resolve
}

late-str = "hello"

// fun tuple2 {
//   // index by indirection via late-resolved tuple
//   t = (1, 2, 3)
//   x = late-tuple.0
//   y = t[x]
//   y
// }
// 
// late-tuple = (1, 2)

// fun tuple3 {
//   // constant folding with operations
//   xs = (1, 2.3, 4.5)
//   z i64 = 1
//   y = z
//   a2 = xs[y + 1] // folded into `2`
//   // a2 = xs[((y + 1) / 2) + 1] // folded into `2` [BUG]
// }
