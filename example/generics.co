fun generics {
  // type T1 (int, f32, List<int>)
  type S1<A,B> { a A; b B }
  // type S2 S1  // tests AliasType resolution

  // _ u32[]
  // _ u32[][]
  // _ S1<i32,S1<u32,f32>> // (i32, (u32, f32))
  // _ S1<i32,S1<i32,S1<u32,f32>>> // (i32, (i32, (u32, f32)))

  // _ S1<int,str>[]  // S1<int,str>[]
  _ List<S1<int,str>>[]  // S1<int,str>[][]
  _ List<S1<int,str>[]>  // S1<int,str>[][]
  _ List<S1<int,str>[]>[]  // S1<int,str>[][][]

  // _ List<int> // int[]
  // _ List<int> // int[]
  // _ List<f32> // f32[]
  // _ List<f32> // f32[]
  // _ T1.2    // int[] because T1.2 = List<int>
  // _ T1.2[]  // int[][] because T1.2 = List<int>

  // // ambiguous expressions
  // a, b, x = 1, 2, 3
  // _ = x < a && b > a     // (assign _ (ANDAND (LSS x a) (GTR b a)))
  // _ = S2<int,f32>()       // (assign _ (call (type S2<int,f32>) ()))
  // _ = unkn<int,f32>()    // (assign _ (call (type ~unkn<int,f32>) ()))
  // _ = List<int>()        // (assign _ (call (type int[]) ()))
  // _ int[] = List<int>()  // (var _ (call (type int[]) ()))
  // _, _ = a<b,a>b         // (assign _ (LSS a b) (GTR a b))
  // _ = [a<b,a>b]          // (assign _ (List (LSS a b) (GTR a b)))
  // _ = [t<int,f32>]       // (assign _ (List (type S1<int,f32>)))
  // t<int,f32>()           // (call (type S1<int,f32>)) ())
  // List<int>()            // (call (type int[]) ())
}

// // late-resolved type alias
// type unkn List
