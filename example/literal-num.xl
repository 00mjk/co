

// u8 i8 u16 i16 u32 i32 u64 i64
// bool

// cast to i64
_ i64 = 9223372036854775807     // u64   -> i64  (I64_MAX)
_ i64 = -9223372036854775808.0  // float -> i64  (I64_MIN)
_ i64 = +123                    // i32   -> i64
_ i64 = -123                    // i32   -> i64
_ i64 = 123                     // u32   -> i64
_ i64 = '\U00010299'            // char  -> i64

// cast to u64
_ u64 = +9223372036854775807 // i64   -> u64  (I64_MAX)
_ u64 = 9223372036854.0      // float -> u64
_ u64 = +123                 // i32   -> u64
_ u64 = 123                  // u32   -> u64
_ u64 = '\U00010299'         // char  -> u64

// cast to i32
_ i32 = 2147483647    // u32   -> i32  (I32_MAX)
_ i32 = -2147483648   // i32   -> i32  (I32_MIN)
_ i32 = +123          // i32   -> i32
_ i32 = -123          // i32   -> i32
_ i32 = 123           // i32   -> i32
_ i32 = 123.0         // float -> i32
_ i32 = '\U00010299'  // char  -> i32

// cast to u32
_ u32 = +2147483647   // s32   -> u32  (I32_MAX)
_ u32 = +123          // i32   -> u32
_ u32 = 123           // i32   -> u32
_ u32 = 123.0         // float -> u32
_ u32 = '\U00010299'  // char  -> u32

// cast to i16
_ i16 = 32767    // u32   -> i16  (I16_MAX)
_ i16 = -32768   // i32   -> i16  (I16_MIN)
_ i16 = +123     // i32   -> i16
_ i16 = -123     // i32   -> i16
_ i16 = 30000.0  // float -> i16
_ i16 = '\u221A' // char  -> i16

// cast to u16
_ u16 = 65535    // u32   -> u16  (U16_MAX)
_ u16 = +123     // i32   -> u16
_ u16 = 123      // i32   -> u16
_ u16 = 50000.0  // float -> u16
_ u16 = '\u221A' // char  -> u16

// cast to i8
_ i8 = 127    // u32   -> i8  (I8_MAX)
_ i8 = -128   // i32   -> i8  (I8_MIN)
_ i8 = +123   // i32   -> i8
_ i8 = -123   // i32   -> i8
_ i8 = 123.0  // float -> i8
_ i8 = 'a'    // char  -> i8

// cast to u8
_ u8 = 255    // u32   -> u8  (U8_MAX)
_ u8 = +123   // i32   -> u8
_ u8 = 123    // i32   -> u8
_ u8 = 200.0  // float -> u8
_ u8 = '\xff' // char  -> u8

// cast to f64
_ f64 = 9223372036854775807  // u64   -> f64  (I64_MAX)
_ f64 = -9223372036854775808 // i64   -> f64  (I64_MIN)
_ f64 = +123                 // i32   -> f64
_ f64 = -123                 // i32   -> f64
_ f64 = 0                    // u32   -> f64
_ f64 = '\U00010299'         // char  -> f64

// cast to f32
_ f32 = 9223372036854775807  // u64   -> f32  (I64_MAX)
_ f32 = -9223372036854775808 // i64   -> f32  (I64_MIN)
_ f32 = 922337203.6854775807 // f64   -> f32  not an error
_ f32 = +123                 // i32   -> f32
_ f32 = -123                 // i32   -> f32
_ f32 = 0                    // u32   -> f32
_ f32 = '\U00010299'         // char  -> f32

// cast to int (note: assumes int is >= 32 bit large)
_ int = 2147483647    // u32 -> int  (I32_MAX)
_ int = -2147483648   // i32 -> int  (I32_MIN)
_ int = +123          // i32 -> int
_ int = -123          // i32 -> int
_ int = 123           // i32 -> int
_ int = '\U00010299'  // char  -> int

// cast to uint (note: assumes uint is >= 32 bit large)
_ uint = +2147483647   // s32 -> uint  (I32_MAX)
_ uint = +123          // i32 -> uint
_ uint = 123           // i32 -> uint
_ uint = '\U00010299'  // char  -> uint

// // invalid cast to i64
// _ i64 = 9223372036854775808 // error: constant ... overflows i64
// _ i64 = 12.3  // error: constant ... truncated to i64

// // invalid cast to u64
// _ u64 = -1 // error: constant ... overflows u64
// _ u64 = 12.3  // error: constant ... truncated to u64

// invalid cast to i32
// _ i32 = 2147483648   // I32_MAX + 1
// _ i32 = -2147483649  // I32_MIN - 1


// ----------------------------------------------------------------------------
// TODO  integers, binary, default for lit
ib0 = 0b0   // i32 (<=i8)

// ----------------------------------------------------------------------------
// TODO  integers, binary, fitted
fib0 i8 = 0b0   // i32

// ----------------------------------------------------------------------------
// integers, octal, default for lit
io0 = 0b0   // i32 (<=i8)
io1 = 0o177 // i32 (<=i8)
io3 = 0o200 // i32 (<=u8)

io4 = 0o400      // i32 (<=i16)
io5 = 0o77777    // i32 (<=i16)
io6 = 0o100000   // i32 (<=u16)

io7 = 0o17777777777 // i32
io8 = 0o20000000000 // i64 (<=u32)

io9 = 0o40000000000 // i64 (<=u32)
io10 = 0o377777777777777751 // i64
io11 = 0o777777777777777777777 // i64
io12 = 0o1000000000000000000000 // u64

// ----------------------------------------------------------------------------
// TODO  integers, octal, fitted
fio0 i8 = 0b0   // i32

// ----------------------------------------------------------------------------
// integers, decimal, default for lit
id0 = 0   // i32 (<=i8)
id1 = 127 // i32 (<=i8)
id2 = 128 // i32 (<=u8)

id3 = 256   // i32 (<=i16)
id4 = 32767 // i32 (<=i16)
id5 = 32768 // i32 (<=u16)
id6 = -32768 // i32 (<=u16)

id7 = 1048576   // i32
id8 = 2147483647 // i32 (I32_MAX)
id8b = -2147483648 // i32 (I32_MIN)
id8c = -2147483649 // i64 (I32_MIN+1)
id9 = 2147483648 // i64 (<=u32 but we prefer i64)

id10 = 4294967295          // i64 (UINT32_MAX)
id11 = 4294967296          // i64 (UINT32_MAX + 1)
id12 = 9223372036854775807 // i64 (I64_MAX)
id13 = -9223372036854775808  // i64 (I64_MIN)
id14 = 9223372036854775808 // u64 (I64_MAX+1)
id15 = 18446744073709551615 // u64 (U64_MAX)
// id16 = -9223372036854775809
  // error: constant -9223372036854775809 overflows i64
// id17 = -18446744073709551615
//   // error: constant 18446744073709551615 overflows i64
// id18 = 18446744073709551616
//   // error: constant 18446744073709551616 overflows u64


// ----------------------------------------------------------------------------
// integers, decimal, fitted
fid0 i8 = 0
fid1 i8 = 127
fid2 u8 = 128
// fid2b i8 = 128 // error: constant 128 overflows i8
// fid2c u8 = -1   // error: constant -1 overflows u8

fid3 i16 = 256
fid4 i16 = 32767
fid5 u16 = 32768
// fid5b i16 = 32768 // error: constant 32768 overflows i16
// fid5c u16 = -1 // error: constant -1 overflows u16

fid6 i32 = 1048576
fid7 i32 = 2147483647
fid8 u32 = 2147483648
// fid8b i32 = 2147483648 // error: constant 2147483648 overflows i32
// fid8c u32 = -1 // error: constant -1 overflows u32

fid10 i64 = 4294967296
fid11 i64 = 9223372036854775807
fid12 u64 = 9223372036854775808
// fid12b i64 = 9223372036854775808
//   // error: constant 9223372036854775808 overflows i64
// fid12c u64 = -1 // error: constant -1 overflows u64

// Assumes int/uint is 32-bit
fid13 int = 1048576
fid14 int = 2147483647
fid15 uint = 2147483648
// fid15b int = 2147483648 // error: constant 2147483648 overflows int
// fid15c uint = -1 // error: constant -1 overflows uint

// ----------------------------------------------------------------------------
// integers, hex, default for lit
ih0 = 0x0  // i32 (<=i8)
ih1 = 0x7F // i32 (<=i8)
ih2 = 0x80 // i32 (<=u8)

ih3 = 0x100  // i32 (<=i16)
ih4 = 0x7FFF // i32 (<=i16)
ih5 = 0x8000 // i32 (<=u16)

ih6 = 0x100000   // i32
ih7 = 0x7FFFFFFF // i32
ih8 = 0x80000000 // i64 (<=u32)
ih8b = 0x0007FFFFFFF // i32

ih10 = 0x100000000        // i64
ih11 = 0x7FFFFFFFFFFFFFFF // i64
ih12 = 0x8000000000000000 // u64
// ih12a = 0x10000000000000000
//   // error: constant 0x10000000000000000 overflows u64

// ----------------------------------------------------------------------------
// integers, hex, fitted
fih0 i8 = 0x0
fih1 i8 = 0x7F
fih2 u8 = 0x80
// fih2b i8 = 0x80 // error: constant 0x80 overflows i8
fih2c u8 = 0x00000080 // leading zeroes

fih3 i16 = 0x1000
fih4 i16 = 0x7FFF
fih5 u16 = 0x8000
// fih5e i16 = 0x8000 // error: constant 0x8000 overflows i16

fih6 i32 = 0x10000
fih7 i32 = 0x7FFFFFFF
fih8 u32 = 0x80000000
// fih8e i32 = 0x80000000 // error: constant 0x800000 overflows i32

fih10 i64 = 0x100000000
fih11 i64 = 0x7FFFFFFFFFFFFFFF
fih12 u64 = 0x8000000000000000
// fih12a i64 = 0x8000000000000000
//   // error: constant 0x8000000000000000 overflows i64
// fih12b u64 = 0x10000000000000000
//   // error: constant 0x10000000000000000 overflows u64

// ----------------------------------------------------------------------------
// floating-point numbers
fl0 = 1.2
fl1 = -1.2
fl2 f32 = 1.2
fl3 f32 = -1.2
fl4 f64 = 1.2
fl5 f64 = -1.2
fl6 f64 = fl3
// fl7 f32 = fl5 // error: constant fl5 truncated to f32
// fl90 int = 1.2 // error: constant 1.2 truncated to int
// fl91 str = 1.2 // error: cannot use 1.2 as type str
// fl92 int = fl0 // error: constant fl0 truncated to int
