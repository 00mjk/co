// fun a -> 4
// fun b
// fun c {}
// fun d { 4 }

// fun isqrt(x, y int) -> x * y

// fun main {
//   x = 4
//   y = 5
//   // z = x + y
//   x = 8
//   if x > 0 {
//     y = 6
//   }
//   z = isqrt(x, y)
// }

// fun foo(x, y int) int {
//   a = x
//   b = y * 1
//   c = b + b
//   d = a + y
//   if x > 3 {
//     d = a + 1
//     h = a + b
//   }
//   d
// }


// // ------------------------------
// fun constfold int {
//   k i32 = 2
//   a i32 = 1 + k
//   a * -9
//   // becomes just "-27"
// }

// fun main {
//   // This function does not return a value, meaning the
//   // function call here is an "unused expression".
//   // This tests the dead-code elimination process to verify
//   // that the function call is not eliminated even though
//   // it's unused.
//   // This test should be updated when/if the
//   // dead-code-eliminiation process supports eliminating
//   // function calls that are pure (no side effects.)
//   // Currently DCE assumes all calls have side effects, and
//   // so no calls are ever eliminated.
//   constfold()
// }
// // fun main int {
// //   // Complement to the above, with a return type, that
// //   // makes the function call "live" and thus never gets
// //   // eliminated by DCE.
// //   constfold()
// // }
// // ------------------------------

// type A i32    // concrete
// type B = i32  // alias

fun foo(x, _, y int) int {
  // x + y

  // a = x + y
  // d = a
  // c = a + d

  if x > y {
    x *= 2 //|| 1
  } else {
    y *= 2
  }
  x + y

  // if x > y {
  //   x *= 2 //|| 1
  // } else {
  //   y *= 2
  // }
  // x + y

  // if x > y {
  //   x *= 2 //|| 1
  // } else {
  //   y *= 2
  // }
  // x + y

  // if x > y {
  //   x *= 2 //|| 1
  // } else {
  //   y *= 2
  // }
  // x + y

  // if x > y {
  //   x *= 2 //|| 1
  // } else {
  //   y *= 2
  // }
  // x + y

  // if x > y {
  //   x *= 2 //|| 1
  // } else {
  //   y *= 2
  // }
  // x + y

  // if x > y {
  //   x *= 2 //|| 1
  // } else {
  //   y *= 2
  // }
  // x + y


  // k u8 = 200
  // a = x + y
  // b = a - a
  // c = a * b
  // c + k
}


// fun foo(x, y int) int {
//   a = x     // alias-only
//   b = y * 1 // unused
//   c = b + b + 8 // unused
//   d = a + y
//   if x > 30 / 10 {
//     d = a + 2
//     h = a + d // unused
//   }
//   d
// }

// fun dist(x, y int) int {
//   if x > 3 {
//     y++
//   }

//   // x || y

//   // while x > 0 {
//   //   x--
//   //   y--
//   // }

//   y

//   // curl -s -o


//   // y && 8

//   // while x < 10 {
//   //   x++
//   // }
//   // x

//   // while x > 0 {
//   //   x--
//   // }
//   // y

//   // if x > 3 {
//   //   y++
//   // }
//   // x = isqrt(x, x + y)
//   // return x

//   // a = x + y
//   // b = 1 + a * (a / (5 - 8))
//   // b || y
//   // a += 5
//   // b++
//   // a - b // warn: unused operation
//   // return a + b
//   // // a

//   // x, y = y, x

//   // a = x + y
//   // a, x, y = x, y, a

//   // b = x < 0 || y < 0
//   // b = x || y
//   // b = x && y
//   // b

//   // isqrt = isqrt2

//   // x = y + 2

//   // if x > 3 {
//   //   x = 3
//   // } else if x > 2 {
//   //   x = 2
//   // } else if x > 1 {
//   //   x = 1
//   // } else {
//   //   x = 0
//   // }

//   // if x > 0 || x < 0 {
//   //   x = x * 2
//   // }
//   // if y > 0 {
//   //   y = y - 3
//   // }
//   // y

//   // x = x * x
//   // y = y * y
//   // if x > 0 || x < 0 {
//   //   x = x * 2
//   // }
//   // else {
//   //   x = x / 2
//   // }
//   // x * y
//   isqrt(x + y)
// }
